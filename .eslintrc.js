function prod (local = 'warn', production = 'error') {
  return ['testing', 'production'].includes(process.env.APP_ENV) ? production : local;
}

module.exports = {
  root: true,
  env: {
    node: true,
    es6: true,
    browser: true,
    jest: true,
  },
  globals: {
    global: false,
    require: false,
    module: true,
    process: false,
    Buffer: false,

    VERSION: false,
    LICENSE: false,
  },
  plugins: [
    'promise',
  ],
  extends: [
    'eslint:recommended',
    'plugin:promise/recommended',
  ],
  parser: 'babel-eslint',
  parserOptions: {
    sourceType: 'module',
  },
  rules: {
    /// /////
    // ESLint
    // https://eslint.org/docs/rules/
    // Recommended rules (with âˆš) are enabled

    // Possible Errors
    'no-async-promise-executor': 'error',
    'no-console': prod('off', 'warn'),
    'no-debugger': prod('off'),
    'no-extra-parens': [prod(), 'all', { nestedBinaryExpressions: false }],
    'no-misleading-character-class': 'error',
    'no-template-curly-in-string': 'error',
    // Best Practices
    'block-scoped-var': 'error',
    'curly': ['error', 'multi-line', 'consistent'],
    // 'default-case': [],
    'dot-location': ['error', 'property'],
    'dot-notation': ['error', { allowPattern: '^[a-z]+(_[a-z]+)+$' }],
    'eqeqeq': 'error',
    // 'no-alert': prod(),
    'no-caller': prod(),
    'no-else-return': 'error',
    'no-eq-null': 'error',
    'no-eval': 'error',
    'no-extend-native': 'error',
    'no-floating-decimal': 'error',
    'no-implied-eval': 'error',
    'no-iterator': 'error',
    'no-labels': 'error',
    'no-lone-blocks': 'error',
    'no-loop-func': 'error',
    'no-multi-spaces': 'error',
    'no-multi-str': 'error',
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-wrappers': 'error',
    'no-proto': 'error',
    'no-return-assign': ['error', 'except-parens'],
    'no-return-await': 'error',
    'no-self-compare': 'error',
    'no-useless-concat': 'error',
    'no-useless-return': 'error',
    'radix': ['error', 'always'],
    'require-await': prod(),
    'vars-on-top': 'error',
    'wrap-iife': [prod(), 'inside'],
    'yoda': [prod(), 'never'],
    // Variables
    'no-shadow': 'error',
    'no-undef': 'error',
    'no-undef-init': 'error',
    'no-undefined': 'error',
    'no-unused-vars': prod(),
    'no-use-before-define': 'error',
    // Stylistic Issues
    'array-bracket-spacing': [prod(), 'never'],
    'block-spacing': [prod(), 'always'],
    'brace-style': [prod(), '1tbs', { allowSingleLine: true }],
    'camelcase': prod(),
    'comma-dangle': [prod(), 'always-multiline'],
    'comma-spacing': prod(),
    'comma-style': prod(),
    'computed-property-spacing': prod(),
    'eol-last': [prod(), 'always'],
    'func-call-spacing': [prod(), 'never'],
    'func-style': [prod(), 'declaration', { allowArrowFunctions: true }],
    'function-paren-newline': 'error',
    'implicit-arrow-linebreak': ['error', 'beside'],
    'indent': ['error', 2, { SwitchCase: 1 }],
    'key-spacing': prod(),
    'keyword-spacing': prod(),
    'linebreak-style': prod('off'),
    'lines-between-class-members': [prod(), 'always', { exceptAfterSingleLine: true }],
    'new-cap': 'error',
    'new-parens': 'error',
    'no-array-constructor': 'error',
    'no-lonely-if': 'error',
    'no-mixed-operators': 'error',
    'no-multiple-empty-lines': [prod(), { max: 2, maxEOF: 1 }],
    'no-negated-condition': 'warn', // prod()?
    'no-nested-ternary': 'error',
    'no-new-object': 'error',
    'no-tabs': 'error',
    'no-trailing-spaces': prod(),
    // 'no-underscore-dangle': ['error', {
    //   allow: ['__vue__'],
    //   allowAfterThis: true,
    //   allowAfterSuper: true,
    // }],
    'no-unneeded-ternary': prod(),
    'no-whitespace-before-property': prod(),
    'object-curly-spacing': [prod(), 'always'],
    'operator-assignment': 'error',
    'operator-linebreak': [prod(), 'after', { overrides: {} }],
    'padding-line-between-statements': [
      prod(),
      // Always require blank lines after directive (like 'use-strict'), except between directives
      { blankLine: 'always', prev: 'directive', next: '*' },
      { blankLine: 'any', prev: 'directive', next: 'directive' },
      // Always require blank lines after import, except between imports
      { blankLine: 'always', prev: 'import', next: '*' },
      { blankLine: 'any', prev: 'import', next: 'import' },
      // Always require blank lines before and after every sequence of variable declarations and export
      { blankLine: 'always', prev: '*', next: ['const', 'let', 'var', 'export'] },
      { blankLine: 'always', prev: ['const', 'let', 'var', 'export'], next: '*' },
      { blankLine: 'any', prev: ['const', 'let', 'var', 'export'], next: ['const', 'let', 'var', 'export'] },
      // Always require blank lines before and after class declaration, if, do/while, switch, try
      { blankLine: 'always', prev: '*', next: ['if', 'class', 'for', 'do', 'while', 'switch', 'try', 'with'] },
      { blankLine: 'always', prev: ['if', 'class', 'for', 'do', 'while', 'switch', 'try', 'with'], next: '*' },
      // Always require blank lines before return statements
      { blankLine: 'always', prev: '*', next: 'return' },
    ],
    'prefer-object-spread': prod(),
    'quote-props': [prod(), 'consistent'],
    'quotes': [prod(), 'single'],
    'semi': ['error', 'always'],
    'semi-spacing': prod(),
    'semi-style': [prod(), 'last'],
    'space-before-blocks': [prod(), 'always'],
    'space-before-function-paren': [prod(), 'always'],
    'space-in-parens': [prod(), 'never'],
    'space-infix-ops': ['error', { int32Hint: false }],
    'switch-colon-spacing': prod(),
    'template-tag-spacing': [prod(), 'always'],
    // ECMAScript 6
    'arrow-body-style': [prod(), 'as-needed'],
    'arrow-parens': [prod(), 'as-needed'],
    'arrow-spacing': prod(),
    'no-duplicate-imports': 'error',
    'no-useless-constructor': 'error',
    'no-useless-rename': 'error',
    'no-var': prod(),
    'object-shorthand': prod(),
    'prefer-arrow-callback': prod(),
    'prefer-const': prod(),
    'prefer-numeric-literals': 'error',
    'prefer-spread': 'error',
    'prefer-template': prod(),
    'rest-spread-spacing': ['error', 'never'],
    'template-curly-spacing': ['error', 'never'],

    /// //////
    // Promise

    'promise/no-callback-in-promise': 'error',
    'promise/no-promise-in-callback': 'warn',
    'promise/prefer-await-to-callbacks': 'warn',
    'promise/prefer-await-to-then': 'warn',
  },
};
